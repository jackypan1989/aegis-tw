scalar Date
scalar Cursor

enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type Profile {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  username: String!
  email: String!
  avatarUrl: String
  website: String

  # posts: [Post!]!
  # comments: [Comment!]!
  # votes: [Vote!]!
}

type Post {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  posterId: ID!
  title: String!
  url: String
  content: String
  commentCount: Int!
  voteCount: Int!
  viewCount: Int!
  rankingScore: Float!

  poster: Profile
  comments: [Comment!]!
  isVoted: Boolean!
}

type Vote {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  postId: ID!
  voterId: ID!

  post: Post
  # voter: Profile!
}

type Comment {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  postId: ID!
  commenterId: ID!
  content: String!

  # post: Post!
  # commenter: Profile!
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: Cursor
  endCursor: Cursor
  totalPageCount: Int
}

type PostEdges {
  cursor: Cursor!
  node: Post!
}

type PostConnection {
  edges: [PostEdges!]!
  pageInfo: PageInfo!
}

type VoteEdges {
  cursor: Cursor!
  node: Vote!
}

type VoteConnection {
  edges: [VoteEdges!]!
  pageInfo: PageInfo!
}

input CreatePostMutationInput {
  posterId: ID!
  title: String!
  url: String
  content: String
}

input UpdatePostMutationInput {
  title: String!
  url: String
  content: String
}

input CreateVoteMutationInput {
  postId: ID!
  voterId: ID!
}

input CreateCommentMutationInput {
  postId: ID!
  commenterId: ID!
  content: String!
}

input PostFilter {
  id: ID
  title: String
}

input VoteFilter {
  postId: String
  voterId: String
}

input PostOrderBy {
  createdAt: OrderByDirection
  rankingScore: OrderByDirection
}

type Query {
  profile(
    id: ID!
  ): Profile

  posts(
    first: Int,
    after: Cursor,
    last: Int,
    before: Cursor,
    filter: PostFilter
  ): PostConnection!
}

type Mutation {
  createPost(input: CreatePostMutationInput!): Post!
  updatePost(filter: PostFilter!, input: UpdatePostMutationInput!): Post!
  viewPost(filter: PostFilter!): Post!
  createVote(input: CreateVoteMutationInput!): Vote!
  removeVote(filter: VoteFilter!): Vote!
  createComment(input: CreateCommentMutationInput!): Comment!
}