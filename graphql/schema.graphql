scalar BigInt

"""
Boolean expression comparing fields on type "BigInt"
"""
input BigIntFilter {
  eq: BigInt
  gt: BigInt
  gte: BigInt
  lt: BigInt
  lte: BigInt
  neq: BigInt
}

"""
Boolean expression comparing fields on type "Boolean"
"""
input BooleanFilter {
  eq: Boolean
  gt: Boolean
  gte: Boolean
  lt: Boolean
  lte: Boolean
  neq: Boolean
}

type Comment {
  id: BigInt!
  created_at: Datetime
}

type CommentConnection {
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type CommentDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Comment!]!
}

type CommentEdge {
  cursor: String!
  node: Comment
}

input CommentFilter {
  id: BigIntFilter
  created_at: DatetimeFilter
}

input CommentInsertInput {
  created_at: Datetime
}

type CommentInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Comment!]!
}

input CommentOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
}

input CommentUpdateInput {
  created_at: Datetime
}

type CommentUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Comment!]!
}

scalar Cursor

scalar Date

"""
Boolean expression comparing fields on type "Date"
"""
input DateFilter {
  eq: Date
  gt: Date
  gte: Date
  lt: Date
  lte: Date
  neq: Date
}

scalar Datetime

"""
Boolean expression comparing fields on type "Datetime"
"""
input DatetimeFilter {
  eq: Datetime
  gt: Datetime
  gte: Datetime
  lt: Datetime
  lte: Datetime
  neq: Datetime
}

"""
Boolean expression comparing fields on type "Float"
"""
input FloatFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

"""
Boolean expression comparing fields on type "Int"
"""
input IntFilter {
  eq: Int
  gt: Int
  gte: Int
  lt: Int
  lte: Int
  neq: Int
}

scalar JSON

"""
Boolean expression comparing fields on type "JSON"
"""
input JSONFilter {
  eq: JSON
  neq: JSON
}

"""The root type for creating and mutating data"""
type Mutation {
  """Deletes zero or more records from the collection"""
  deleteFromCommentCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: CommentFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): CommentDeleteResponse!

  """Deletes zero or more records from the collection"""
  deleteFromPostCollection(
    """Restricts the mutation's impact to records matching the critera"""
    filter: PostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostDeleteResponse!

  """Adds one or more `CommentInsertResponse` records to the collection"""
  insertIntoCommentCollection(objects: [CommentInsertInput!]!): CommentInsertResponse

  """Adds one or more `PostInsertResponse` records to the collection"""
  insertIntoPostCollection(objects: [PostInsertInput!]!): PostInsertResponse

  """Updates zero or more records in the collection"""
  updateCommentCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: CommentUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: CommentFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): CommentUpdateResponse!

  """Updates zero or more records in the collection"""
  updatePostCollection(
    """
    Fields that are set will be updated for all records matching the `filter`
    """
    set: PostUpdateInput!

    """Restricts the mutation's impact to records matching the critera"""
    filter: PostFilter

    """
    The maximum number of records in the collection permitted to be affected
    """
    atMost: Int! = 1
  ): PostUpdateResponse!
}

"""Defines a per-field sorting order"""
enum OrderByDirection {
  AscNullsFirst
  AscNullsLast
  DescNullsFirst
  DescNullsLast
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Post {
  id: BigInt!
  created_at: Datetime
}

type PostConnection {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostDeleteResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

type PostEdge {
  cursor: String!
  node: Post
}

input PostFilter {
  id: BigIntFilter
  created_at: DatetimeFilter
}

input PostInsertInput {
  created_at: Datetime
}

type PostInsertResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

input PostOrderBy {
  id: OrderByDirection
  created_at: OrderByDirection
}

input PostUpdateInput {
  created_at: Datetime
}

type PostUpdateResponse {
  """Count of the records impacted by the mutation"""
  affectedCount: Int!

  """Array of records impacted by the mutation"""
  records: [Post!]!
}

"""The root type for querying data"""
type Query {
  """A pagable collection of type `Comment`"""
  commentCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: CommentFilter

    """Sort order to apply to the collection"""
    orderBy: [CommentOrderBy!]
  ): CommentConnection

  """A pagable collection of type `Post`"""
  postCollection(
    """Query the first `n` records in the collection"""
    first: Int

    """Query the last `n` records in the collection"""
    last: Int

    """Query values in the collection before the provided cursor"""
    before: Cursor

    """Query values in the collection after the provided cursor"""
    after: Cursor

    """Filters to apply to the results set when querying from the collection"""
    filter: PostFilter

    """Sort order to apply to the collection"""
    orderBy: [PostOrderBy!]
  ): PostConnection
}

"""
Boolean expression comparing fields on type "String"
"""
input StringFilter {
  eq: String
  gt: String
  gte: String
  lt: String
  lte: String
  neq: String
}

scalar Time

"""
Boolean expression comparing fields on type "Time"
"""
input TimeFilter {
  eq: Time
  gt: Time
  gte: Time
  lt: Time
  lte: Time
  neq: Time
}

scalar UUID

"""
Boolean expression comparing fields on type "UUID"
"""
input UUIDFilter {
  eq: UUID
  neq: UUID
}