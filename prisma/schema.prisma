generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @map("updated_at") @db.Timestamptz(6)
  username  String    @unique @db.VarChar
  avatarUrl String?   @map("avatar_url") @db.VarChar
  website   String?   @db.VarChar
  email     String    @unique @db.VarChar
  markets   Market[]
  roles     Role[]
  facebook  String?   @db.VarChar
  github    String?   @db.VarChar
  linkedin  String?   @db.VarChar
  twitter   String?   @db.VarChar
  fullname  String?   @db.VarChar
  auto      Boolean?
  location  String?   @db.VarChar
  comments  Comment[]
  posts     Post[]
  votes     Vote[]

  @@map("profiles")
}

model Post {
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @default(now()) @map("updated_at") @db.Timestamptz(6)
  posterId     String    @map("poster_id") @db.Uuid
  title        String?   @db.VarChar
  url          String?   @db.VarChar
  content      String?   @db.VarChar
  commentCount Int       @default(0) @map("comment_count")
  voteCount    Int       @default(0) @map("vote_count")
  viewCount    Int       @default(0) @map("view_count")
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  rankingScore Float     @default(0) @map("ranking_score") @db.Real
  poster       Profile   @relation(fields: [posterId], references: [id], onDelete: Cascade)
  comments     Comment[]
  votes        Vote[]

  @@index([rankingScore(sort: Desc)])
  @@map("posts")
}

model Vote {
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  voterId   String   @map("voter_id") @db.Uuid
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId    String   @map("post_id") @db.Uuid
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  voter     Profile  @relation(fields: [voterId], references: [id], onDelete: Cascade)

  @@unique([postId, voterId])
  @@map("votes")
}

model Comment {
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  commenterId String   @map("commenter_id") @db.Uuid
  content     String   @db.VarChar
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  postId      String   @map("post_id") @db.Uuid
  commenter   Profile  @relation(fields: [commenterId], references: [id], onDelete: Cascade)
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

enum Role {
  ENGINEERING
  DESIGNER
  PRODUCT
  OPERATIONS
  SALES
  MARKETING
  FOUNDER
  ANGEL_INVESTOR
  VENTURE_CAPITAL
}

enum Market {
  SOCIAL_MEDIA
  MEDIA
  HEALTH_CARE
  GAMES
  CRYPTO
  LOGISTICS
  HUMAN_RESOURCE
  ANALYTICS
  EDUCATION
  SECURITY
  FASHION
  FITNESS
  FOOD
  REAL_ESTATE
  E_COMMERCE
  TRAVEL
  AD_TECH
  AI
  DEVELOPER_TOOL
  PRODUCTIVITY
  WEARABLES
  VIRTUAL_REALITY
  COMSUMER
  DATABASES
  FINANCE
}
